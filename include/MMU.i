	IFND	MMU_HEADER_I
MMU_HEADER_I	EQU	1

TRACE_WITH_MMU		EQU	1
FAST_MIRROR		EQU	1

MMUCODE_VERSION		EQU	3
MMUCODE_REVISION	EQU	0

MMUTABLEB_USED	EQU	3

MMU_FOUND	EQU	1
MMU_ERROR	EQU	0

TEST_TC_68030	EQU	$80F01844
;TEST_TT_68040	EQU	$00008064
TEST_TT_68040	EQU	$0000C064
;TEST_TT_68060	EQU	$00008064
TEST_TT_68060	EQU	$0000C064

MMU_NONE	EQU	0
MMU_030		EQU	1
MMU_040		EQU	2
MMU_060		EQU	3

TC_68030	EQU	$80D07750
TC_68040	EQU	$C000
TC_68060	EQU	$0000C210
;TC_68060	EQU	$0000C000

;DTT_68040	EQU	$00FFE060
;ITT_68040	EQU	$00FFE060
DTT_68040	EQU	$00000000
ITT_68040	EQU	$00000000

DTT_68060	EQU	$00000000
ITT_68060	EQU	$00000000

TABLE_DESCRIPTOR_030	EQU	%00000000000000000000000000000010
PAGE_DESCRIPTOR_030	EQU	%00000000000000000000000000000001

TABLE_DESCRIPTOR_040	EQU	%00000000000000000000000000000010
PAGE_DESCRIPTOR_040	EQU	%00000000000000000000000000000001

TABLE_DESCRIPTOR_060	EQU	%00000000000000000000000000000010
PAGE_DESCRIPTOR_060	EQU	%00000000000000000000000001000001

WRITE_PROTECT_030	EQU	%00000000000000000000000000000100
WRITE_PROTECT_040	EQU	%00000000000000000000000000000100
WRITE_PROTECT_060	EQU	%00000000000000000000000000000100

TC_ENABLE_BIT_030	EQU	31
TC_ENABLE_BIT_040	EQU	15
TC_ENABLE_BIT_060	EQU	15

TC_ENABLE_MASK_030	EQU	$80000000
TC_ENABLE_MASK_040	EQU	$00008000
TC_ENABLE_MASK_060	EQU	$00008000

TT_ENABLE_BIT_030	EQU	15
TT_ENABLE_BIT_040	EQU	15
TT_ENABLE_BIT_060	EQU	15

TT_ENABLE_MASK_030	EQU	$00008000
TT_ENABLE_MASK_040	EQU	$00008000
TT_ENABLE_MASK_060	EQU	$00008000

ENTRY_SIZE	EQU	4
TABLE_A_ENTRIES	EQU	128
TABLE_A_SIZE	EQU	TABLE_A_ENTRIES*ENTRY_SIZE
TABLE_B_ENTRIES	EQU	128
TABLE_B_SIZE	EQU	TABLE_B_ENTRIES*ENTRY_SIZE
TABLE_C_ENTRIES	EQU	32
TABLE_C_SIZE	EQU	TABLE_C_ENTRIES*ENTRY_SIZE

PAGE_SIZE_A	EQU	$2000000
PAGE_SIZE_B	EQU	$40000
PAGE_SIZE_C	EQU	$2000

BITS_LEVEL_A	EQU	7
BITS_LEVEL_B	EQU	7
BITS_LEVEL_C	EQU	5

MASK_LEVEL_A	EQU	$FE000000
MASK_LEVEL_B	EQU	$01FC0000
MASK_LEVEL_C	EQU	$0003E000

TABLE_A_BOUND	EQU	512
TABLE_B_BOUND	EQU	512
TABLE_C_BOUND	EQU	512

TABLE_A_MASK	EQU	-TABLE_A_BOUND
TABLE_B_MASK	EQU	-TABLE_B_BOUND
TABLE_C_MASK	EQU	-TABLE_C_BOUND

MMUCode_Ident1	EQU	"MMUC"
MMUCode_Ident2	EQU	("ode"<<8)+0
IdentOffset	EQU	8

MMU_SIZE_BYTE		EQU	2
MMU_SIZE_WORD		EQU	1
MMU_SIZE_LONG		EQU	0
MMU_SIZE_DPMOVE16	EQU	3

MMU_ACCESS_READ		EQU	1
MMU_ACCESS_WRITE	EQU	0
MMU_ACCESS_READMWRITE	EQU	3

	RSRESET
OldTC030		RS.L	1
OldCRP030		RS.L	2
OldSRP030		RS.L	2
OldTT0			RS.L	1
OldTT1			RS.L	1
MMU030_BackupSize	RS.L	0

	RSRESET
OldTC			RS.L	1
OldURP			RS.L	1
OldSRP			RS.L	1
OldDTT0			RS.L	1
OldDTT1			RS.L	1
OldITT0			RS.L	1
OldITT1			RS.L	1
MMU040_BackupSize	RS.L	0

MMU060_BackupSize	EQU	MMU040_BackupSize

	STRUCTURE	MMUCodeOffsets,14

	ULONG	FunctionOffs_MarkBlockValid
; Must be called whilst the OS is active
; Returns with RTS

	ULONG	FunctionOffs_BuildRootTable
; Must be called whilst the OS is active
; Returns with RTS

	ULONG	FunctionOffs_Cleanup
; Must be called whilst the OS is active
; Returns with RTS

	ULONG	FunctionOffs_AllocMMUMem
; Must be called whilst the OS is active
; Returns with RTS

	ULONG	FunctionOffs_InitializeMMUFunctions
; Must be called whilst the OS is active
; Returns with RTS

	ULONG	FunctionOffs_EnableMMU
; Must be called whilst the OS is inactive
; Must be called in supervisor-mode
; Returns with RTE

	ULONG	FunctionOffs_DisableMMU
; Must be called in supervisor-mode
; Returns with RTE

	ULONG	FunctionOffs_SaveMMU
; Must be called whilst the OS is active
; Returns with RTS

	ULONG	FunctionOffs_RestoreMMU
; Must be called whilst the OS is active
; Returns with RTS

	ULONG	FunctionOffs_GetLength
; Can be called at any time
; Returns with RTS

	ULONG	FunctionOffs_RegisterBUSErrorRoutine
; Can be called at any time
; Returns with RTS

	ULONG	FunctionOffs_24BitAddresses
; Can be called at any time
; Returns with RTS

	ULONG	FunctionOffs_FakeMemoryBlock
; Can be called at any time
; Returns with RTS

	ULONG	FunctionOffs_WriteProtectBlock
; Must be called whilst the OS is active
; Returns with RTS

	ULONG	FunctionOffs_MirrorBlock
; Must be called whilst the OS is active
; Returns with RTS

	ULONG	FunctionOffs_SetBUSError
; Can be called at any time
; Returns in D0 the BUSErrorHAndler or 0 if no MMU present
; Returns with RTS

	ULONG	DisplayOffset
; Can be connected to the AbsFun_Display routine of JST
; takes the string to display in A1 (added by Jeff)


	ENDC
